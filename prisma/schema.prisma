generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String?
  email        String
  phone        String?
  address      String?
  passwordHash String?       @map("password_hash")
  active       Boolean?      @default(true)
  avatarUrl    String?       @map("avatar_url")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  companyId    String?
  accounts     Account[]
  appointments Appointment[]
  tokens       Token[]
  company      Company?      @relation(fields: [companyId], references: [id])

  @@map("users")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  userId            String          @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, userId])
  @@map("accounts")
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  price       Decimal        @db.Decimal(10, 2)
  active      Boolean        @default(true)
  quantity    Int?           @default(0)
  companyId   String
  images      ProductImage[]
  company     Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name])
  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Client {
  id          String        @id @default(uuid())
  name        String
  email       String
  phone       String
  age         String?
  address     String?
  city        String?
  companyId   String
  createdAt   DateTime      @default(now())
  appointment Appointment[]
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([email, companyId])
  @@map("clients")
}

model Service {
  id          String        @id @default(uuid())
  name        String
  description String?       @db.VarChar(500)
  companyId   String
  createdAt   DateTime      @default(now())
  price       Float?
  appointment Appointment[]
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Company {
  id          String        @id @default(uuid())
  name        String?
  description String?
  slug        String?
  publicId    String
  createdAt   DateTime      @default(now())
  appointment Appointment[]
  client      Client[]
  Product     Product[]
  service     Service[]
  unit        Unit[]
  user        User[]

  @@map("companies")
}

model Unit {
  id          String   @id @default(uuid())
  name        String
  description String?
  slug        String?
  companyId   String
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("units")
}

model Appointment {
  id          String             @id @default(cuid())
  clientId    String?
  companyId   String
  createdAt   DateTime           @default(now())
  date_end    DateTime?          @db.Timestamp(6)
  date_start  DateTime           @db.Timestamp(6)
  description String?            @db.VarChar(500)
  hour        String
  name        String?
  serviceId   String?
  updatedAt   DateTime           @updatedAt
  userId      String
  status      AppointmentStatus? @default(pending)
  client      Client?            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company     Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  service     Service?           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

enum TokenType {
  PASSWORD_RECOVER
}

enum AccountProvider {
  GITHUB
}

enum Role {
  ADMIN
  EMPLOYEE
  CLIENT
  BILLING
}

enum AppointmentStatus {
  pending
  confirmed
  canceled
}
